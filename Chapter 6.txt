
    Chapter 6


--- Singletons ---


Scala has no static methods or fields. Instead, you use the object construct. 

-> The constructor of an object is executed when the object is first used.

-> An object can have essentially all the features of a class—it can even extend other
classes or traits. You cannot provide constructor parameters.

-> The class and its companion object can access each other’s private features (sharedName.methodName).
They must be located in the same source file.

use cases:

    - As a home for utility functions or constants
    - When a single immutable instance can be shared efficiently
    - When a single instance is required to coordinate some service (the singleton design pattern)


--- Objects extending a class or trait ---


An object can extend a class and/or one or more traits. The result is an object of
a class that extends the given class and/or traits, and in addition has all of the
features specified in the object definition.


--- Apply method --- 


It is common to have objects with an apply method. The apply method is called for
expressions of the form: 

    Object(arg1, ..., argN)


--- Application objects ---


Each Scala program must start with an object’s main method of type Array[String]

    object Hello {
        def main(args: Array[String]) {
            println("Hello, World!")
        }
    }

Instead of providing a main method for your application, you can extend the App
trait and place the program code into the constructor body:

    object Hello extends App {
        println("Hello, World!")                
        println(" ${args(0)}")       // and you access the arguments like this   
    }


--- Enumerations ---


Unlike Java or C++, Scala does not have enumerated types. However, the standard
library provides an Enumeration helper class that you can use to produce
enumerations.

    object TrafficLightColor extends Enumeration {
        val Red, Yellow, Green = Value        // Value is a method of enumeration. It returns
                                              // new instance of an inner class named Value  
    }

you can specify an id, and a name. If you dont, the id starts from 0, and the name 
is taken from the variable name field:

    val Red = Value(10, "Red Color")
    val Blue = Value(20, "Blue Color")

The type of the enumeration (TrafficLightColor.Red, ...) is not TrafficLightColor, but Value.
You can rename that type like so: 

    ...
    type TrafficLightColor = Value
    val Red, Yellow, Green = Value
    ...

Now the type of the enumeration is TrafficLightColor.TrafficLightColor:

    import TrafficLightColor._

    def doWhat(color: TrafficLightColor) = {
        if (color == Red) "stop"
        else if (color == Yellow) "hurry up"
        else "go"
    }

You can traverse those values (enumClass.values), get each value its id, and name:

    for (c <- TrafficLightColor.values) println(s"${c.id}: $c")

You may access the enumeratios like this:

    TrafficLightColor(0)                // Calls Enumeration.apply, Call by ID
    TrafficLightColor.withName("Red")   // Call by name


Answers:


    1.

object Conversions {
  def inchesToCentimeters (inches: Float) = inches * (2.54).toFloat
  def gallonsToLiters (gallons: Float)= gallons * (3.78541).toFloat
}

Conversions.inchesToCentimeters(6)
Conversions.gallonsToLiters(6)


    2.

abstract class UnitConversion {
  def apply(lengthUnit: Float): Float
}

object InchesToCentimeters extends UnitConversion {
  override def apply(lengthUnit: Float): Float = {
    lengthUnit * (2.54).toFloat
  }
}

object gallonsToLiters extends UnitConversion {
  override def apply(lengthUnit: Float): Float = {
    lengthUnit * (3.78541).toFloat
  }
}

InchesToCentimeters(1)
gallonsToLiters(1)


    3. because to use the Point class you need a concrete instatiation per "point"
    in your code, we cant have a singleton extending from this class. 
    

    4. 

class Point(val x: Int, val y: Int)

object Point {
  def apply(x: Int, y: Int): Point = new Point(x,y)
}

val point1 = Point(1,1)
point1.x
point1.y


    5. SKIPPED

    6. 
