
    Chapter 4

-> Maps can be created as mutable or inmutable structures

    val scores = Map("Alice" -> 10, "Bob" -> 3, "Cindy" -> 8)
    val scores = scala.collection.mutable.Map("Alice" -> 10, "Bob" -> 3, "Cindy" -> 8) 

For empty maps, you need to specify the types

    val scores = scala.collection.mutable.Map[String, Int]() 

-> You access values with its apply method

    scores("bob") // an exception is thrown if "bob" is not found

But your implementation can be more elegant

    val bobsScore = if (scores.contains("Bob")) scores("Bob") else 0 
    val bobsScore = scores.getOrElse("Bob", 0)

-> You can return option values with "get()", and assign default values for non existing keys

    score.get("bob")    
    scores.withDefaultValue(0)

-> inmutable maps can't be updated, but you can do something that’s just as
useful— obtain a new map that has the desired update

    val newScores = scores + ("Bob" -> 10, "Fred" -> 7) // New map with update
    val newScores = scores - "Alice"


---  Iterating over Maps ---


You can mix some pattern matching in a regular for loop. This prevents tedious calls on your map

    for ((k, v) <- map) // ... process k, and v

You can iterate over every key, or every value:

    for (values <- map.values)
    for (keys <- map.keySet)

Reversing maps is just as simple as this

    for ((k, v) <- map) yield (v, k)


--- Sorted Maps --- 


